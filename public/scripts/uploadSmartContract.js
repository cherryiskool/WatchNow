let account;

ABI = [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_videoTitle",
          "type": "string"
        },
        {
          "internalType": "address payable[]",
          "name": "_reactedToContracts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_reactedToContractsPercentageCuts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_percentageCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "applyContractTermsToDonation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageCut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reactedToContracts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reactedToContractsPercentageCuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "videoTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]

const bytecode = "0x60806040523480156200001157600080fd5b5060405162000f3c38038062000f3c833981810160405281019062000037919062000449565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000908051906020019062000090929190620000d4565b508260039080519060200190620000a992919062000165565b508160049080519060200190620000c2929190620001f4565b50806001819055505050505062000701565b828054620000e29062000639565b90600052602060002090601f01602090048101928262000106576000855562000152565b82601f106200012157805160ff191683800117855562000152565b8280016001018555821562000152579182015b828111156200015157825182559160200191906001019062000134565b5b50905062000161919062000246565b5090565b828054828255906000526020600020908101928215620001e1579160200282015b82811115620001e05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000186565b5b509050620001f0919062000246565b5090565b82805482825590600052602060002090810192821562000233579160200282015b828111156200023257825182559160200191906001019062000215565b5b50905062000242919062000246565b5090565b5b808211156200026157600081600090555060010162000247565b5090565b60006200027c620002768462000534565b62000500565b905080838252602082019050828560208602820111156200029c57600080fd5b60005b85811015620002d05781620002b5888262000394565b8452602084019350602083019250506001810190506200029f565b5050509392505050565b6000620002f1620002eb8462000563565b62000500565b905080838252602082019050828560208602820111156200031157600080fd5b60005b858110156200034557816200032a888262000432565b84526020840193506020830192505060018101905062000314565b5050509392505050565b600062000366620003608462000592565b62000500565b9050828152602081018484840111156200037f57600080fd5b6200038c84828562000603565b509392505050565b600081519050620003a581620006cd565b92915050565b600082601f830112620003bd57600080fd5b8151620003cf84826020860162000265565b91505092915050565b600082601f830112620003ea57600080fd5b8151620003fc848260208601620002da565b91505092915050565b600082601f8301126200041757600080fd5b8151620004298482602086016200034f565b91505092915050565b6000815190506200044381620006e7565b92915050565b600080600080608085870312156200046057600080fd5b600085015167ffffffffffffffff8111156200047b57600080fd5b620004898782880162000405565b945050602085015167ffffffffffffffff811115620004a757600080fd5b620004b587828801620003ab565b935050604085015167ffffffffffffffff811115620004d357600080fd5b620004e187828801620003d8565b9250506060620004f48782880162000432565b91505092959194509250565b6000604051905081810181811067ffffffffffffffff821117156200052a57620005296200069e565b5b8060405250919050565b600067ffffffffffffffff8211156200055257620005516200069e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200058157620005806200069e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115620005b057620005af6200069e565b5b601f19601f8301169050602081019050919050565b6000620005d282620005d9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200062357808201518184015260208101905062000606565b8381111562000633576000848401525b50505050565b600060028204905060018216806200065257607f821691505b602082108114156200066957620006686200066f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006d881620005c5565b8114620006e457600080fd5b50565b620006f281620005f9565b8114620006fe57600080fd5b50565b61082b80620007116000396000f3fe60806040526004361061004a5760003560e01c80630a84842b1461004f57806374f3219914610059578063a2d48c6f14610084578063b5cd59b4146100c1578063f4f42246146100fe575b600080fd5b610057610129565b005b34801561006557600080fd5b5061006e610397565b60405161007b919061053e565b60405180910390f35b34801561009057600080fd5b506100ab60048036038101906100a691906104a3565b610425565b6040516100b89190610560565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e391906104a3565b610449565b6040516100f59190610523565b60405180910390f35b34801561010a57600080fd5b50610113610488565b6040516101209190610560565b60405180910390f35b6000600380549050111561032b5760005b60038054905081101561032557600060048281548110610183577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001543461019991906105c8565b9050600060646003805490506101af91906105c8565b9050600383815481106101eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a84842b828461023d9190610597565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b5050505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82846102c99190610597565b600380549050346102da9190610597565b6102e49190610622565b9081150290604051600060405180830381858888f1935050505015801561030f573d6000803e3d6000fd5b505050808061031d906106f7565b91505061013a565b50610395565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610393573d6000803e3d6000fd5b505b565b600080546103a4906106c5565b80601f01602080910402602001604051908101604052809291908181526020018280546103d0906106c5565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b6004818154811061043557600080fd5b906000526020600020016000915090505481565b6003818154811061045957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008135905061049d816107de565b92915050565b6000602082840312156104b557600080fd5b60006104c38482850161048e565b91505092915050565b6104d581610656565b82525050565b60006104e68261057b565b6104f08185610586565b9350610500818560208601610692565b610509816107cd565b840191505092915050565b61051d81610688565b82525050565b600060208201905061053860008301846104cc565b92915050565b6000602082019050818103600083015261055881846104db565b905092915050565b60006020820190506105756000830184610514565b92915050565b600081519050919050565b600082825260208201905092915050565b60006105a282610688565b91506105ad83610688565b9250826105bd576105bc61076f565b5b828204905092915050565b60006105d382610688565b91506105de83610688565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561061757610616610740565b5b828202905092915050565b600061062d82610688565b915061063883610688565b92508282101561064b5761064a610740565b5b828203905092915050565b600061066182610668565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156106b0578082015181840152602081019050610695565b838111156106bf576000848401525b50505050565b600060028204905060018216806106dd57607f821691505b602082108114156106f1576106f061079e565b5b50919050565b600061070282610688565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561073557610734610740565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6107e781610688565b81146107f257600080fd5b5056fea26469706673582212206b67e6e32a88ece9e83a33846bb7882edc0bf4ea60ce2ce12b307bb8338fcc8f64736f6c63430008000033"

const connectMetamask = async () => {
    if(window.ethereum !== "undefined") {
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        // this automatically checks the users wallet
        // may cause a bug if they have not entered one (will be fixed later)
        account = accounts[0];
        document.getElementById("userArea").innerHTML = `User Account: ${account}`;
    }
}
const deployContract = async (event) => {
    // stops submission from happening immediately
    event.preventDefault();

    // try this
    try {
        window.web3 =  await new Web3(window.ethereum);
        window.contract =  new window.web3.eth.Contract(ABI);

        // gets the video title from the form
        const videoTitle = String(document.getElementById("videoTitle").value)

        // gets the links to the reacted to videos
        let reactedToLinks = document.getElementsByClassName("reactedTo");

        // creates array to store contracts of reacted to videos
        let reactedToContracts = []
        let reactedToContractsCuts = []

        console.log("ReactedToLinks",reactedToLinks)
        // for every reacted to link
        for(const reactedToLink of reactedToLinks) {
            // get the filename of the video they linked to
            if(reactedToLink.value !== "") {
              let indexOfUrl = String(reactedToLink.value).indexOf("watch/");
              let reactedToFileName = String(reactedToLink.value).slice(indexOfUrl + 6);

              // request the contract address of their video
              let req = await fetch( `/videos/upload/reactedToContractAddress/${reactedToFileName}`)
              let contractAddress = await req.json();
              console.log("contractAddress", contractAddress)
              window.contract =  new window.web3.eth.Contract(ABI, contractAddress);
              let contractCut = await window.contract.methods.percentageCut().call();
              // add the contract address to the reacted to contracts 
              // so later we can put this in the reaction smart contract
              reactedToContracts.push(contractAddress);
              reactedToContractsCuts.push(contractCut);
              console.log("entered this")
            }

        }
        console.log(reactedToContracts)
        // manually do the post request
        // allows me to retrieve the videoFilename easier and control the flow easier
        // may put this after the contract creation??
        // or in the case that contract creation fails have the database delete the video


        
        document.getElementById("userArea").innerHTML = 'Please wait for your contract to deploy before leaving this page.'

        // get the percentage cut the creator wants
        const percentageCut = Number(document.getElementById("percentageCut").value)
        // deploy the contract with all the relevant variables
        const deployment = await window.contract.deploy({
            data: bytecode,
            arguments:[videoTitle, reactedToContracts, reactedToContractsCuts, percentageCut]
        }).send({from: account, gas: 6000000})

        const videoData = new FormData(event.target);

        const upload = await fetch('/videos/upload', {
            method: 'POST', 
            body: videoData
        });

        const videoFilename = await upload.json();

        // may change the POST to send the data through body rather than the url
        // ^ not strictly necessary as no private data is used
        // this uses the route that saves the contract address data 
        await fetch(`/videos/upload/reactedToContractAddress/${videoFilename.filename}/${deployment.options.address}`, {
            method: 'POST'
        });

        document.getElementById("userArea").innerHTML = 'Video successfully uploaded!'
    } 
    // in case of error log error
    // later will add some alert thingy
    catch (err) {
        alert(err);
    }
}