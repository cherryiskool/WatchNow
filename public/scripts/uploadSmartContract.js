let account;

ABI = [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_channelName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_videoTitle",
          "type": "string"
        },
        {
          "internalType": "address payable[]",
          "name": "_reactedToContracts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_reactedToContractsPercentageCuts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_percentageCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "applyContractTermsToDonation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "channelName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageCut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reactedToContracts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reactedToContractsPercentageCuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "videoTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]

const bytecode = ""

const connectMetamask = async () => {
    if(window.ethereum !== "undefined") {
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        // this automatically checks the users wallet
        // may cause a bug if they have not entered one (will be fixed later)
        account = accounts[0];
        document.getElementById("userArea").innerHTML = `User Account: ${account}`;
    }
}
const deployContract = async (event) => {
    // stops submission from happening immediately
    event.preventDefault();

    // try this
    try {
        window.web3 =  await new Web3(window.ethereum);
        window.contract =  new window.web3.eth.Contract(ABI);

        // gets the video title from the form
        const videoTitle = String(document.getElementById("videoTitle").value)

        // gets the links to the reacted to videos
        let reactedToLinks = document.getElementsByClassName("reactedTo");

        // creates array to store contracts of reacted to videos
        let reactedToContracts = []
        let reactedToContractsCuts = []

        console.log("ReactedToLinks",reactedToLinks)
        // for every reacted to link
        for(const reactedToLink of reactedToLinks) {
            // get the filename of the video they linked to
            if(reactedToLink.value !== "") {
              let indexOfUrl = String(reactedToLink.value).indexOf("watch/");
              let reactedToFileName = String(reactedToLink.value).slice(indexOfUrl + 6);

              if (reactedToFileName == '') {
                reactedToFileName = reactedToLink.value;
              }
              // request the contract address of their video
              let req = await fetch( `/videos/upload/reactedToContractAddress/${reactedToFileName}`)
              let contractAddress = await req.json();
              console.log("contractAddress", contractAddress)
              if (!contractAddress.ok) {
                throw new Error('Invalid react link');
              } else if (contractAddress.success == true) {
                contractAddress = contractAddress.address
              }
              window.contract =  new window.web3.eth.Contract(ABI, contractAddress);
              let contractCut = await window.contract.methods.percentageCut().call();
              // add the contract address to the reacted to contracts 
              // so later we can put this in the reaction smart contract
              reactedToContracts.push(contractAddress);
              reactedToContractsCuts.push(contractCut);
            }

        }

        const channelNameRequest = await fetch('/getSessionUsername');

        const channelName = await channelNameRequest.json();
        
        console.log('channelname', channelName)


        // get the percentage cut the creator wants
        const percentageCut = Number(document.getElementById("percentageCut").value)

        // prevents invalid percentages
        if (percentageCut > 100) {
          throw new Error('Invalid percentage cut');
        } 
        // deploy the contract with all the relevant variables
        const deployment = await window.contract.deploy({
            data: bytecode,
            arguments:[channelName, videoTitle, reactedToContracts, reactedToContractsCuts, percentageCut]
        }).send({from: account, gas: 6000000})

        document.getElementById("userArea").innerHTML = 'Please wait for your contract to deploy before leaving this page...'

        // create form object from form and POST it
        const videoData = new FormData(event.target);

        const upload = await fetch('/videos/upload', {
            method: 'POST', 
            body: videoData
        });

        console.log(deployment.options.address);

        // video filename 
        const videoFilename = await upload.json();

        // may change the POST to send the data through body rather than the url
        // ^ not strictly necessary as no private data is used
        // this uses the route that saves the contract address data 
        await fetch(`/videos/upload/reactedToContractAddress/${videoFilename.filename}/${deployment.options.address}`, {
            method: 'POST'
        });

        document.getElementById("userArea").innerHTML = `Contract successfully deployed to ${deployment.options.address}`
    } 
    // in case of error log error
    // later will add some alert thingy
    catch (err) {
        alert(err);
    }
}